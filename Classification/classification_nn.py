# -*- coding: utf-8 -*-
"""NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CvsEGxI1MdkGkhvg6Ofqr_-s2Lh__py7

**Import required Libraries**
"""

# !pip install scikit-multilearn

import pandas as pd
import numpy as np
from numpy import array
from numpy import asarray
from numpy import zeros

from google.colab import drive

from keras.preprocessing.text import one_hot
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers.core import Activation, Dropout, Dense
from keras.layers import Flatten, LSTM
from keras.layers import GlobalMaxPooling1D
from keras.models import Model
from keras.layers.embeddings import Embedding
from sklearn.model_selection import train_test_split
from keras.preprocessing.text import Tokenizer
from keras.layers import Input
from keras.layers.merge import Concatenate

import matplotlib.pyplot as plt

"""**Mount drive**"""

drive.mount('/content/drive')
df=pd.read_csv('/content/drive/My Drive/IBM/tweets_preprocessed.csv',index_col = None,usecols=[0,11,35,36,37,38,39,40,41])
print(df.shape)
df.head()

"""**Select a range of rows.**
**Replace NaNs with 0s.**
**Change values from Float to Integer**
"""

df = df.iloc[0:480]
print(df.shape)
df = df.fillna(0)
df[['Positive','Happy','Relief','Neutral','Anxious','Sad','Negative']]=df[['Positive','Happy','Relief','Neutral','Anxious','Sad','Negative']].astype(int)
df.head()

"""**Define Input and Output variables**"""

Input_column = df['tweet']
Output_columns = df[['Positive','Happy','Relief','Neutral','Anxious','Sad','Negative']]
X = Input_column.values
y = Output_columns.values
print(X[:3])
print(y[:3])

"""**Split data**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)
print(X_train.shape[0])
print(X_test.shape[0])
print(y_train.shape[0])
print(y_test.shape[0])

"""**Texts to Padded Sequences**"""

tokenizer = Tokenizer()
tokenizer.fit_on_texts(X_train)
print(len(tokenizer.word_index))
X_train = tokenizer.texts_to_sequences(X_train)
X_test = tokenizer.texts_to_sequences(X_test)
X_train = pad_sequences(X_train, padding='post', maxlen=57)
X_test = pad_sequences(X_test, padding='post', maxlen=57)
print(X_train)
print(y_train)

"""**Use a pre-trained Glove matrix**"""

embeddings_dictionary = dict()
vocab_size=len(tokenizer.word_index)+1

glove_file = open('/content/drive/My Drive/glove.6B.300d.txt', encoding="utf8")

for line in glove_file:
    records = line.split()
    word = records[0]
    vector_dimensions = asarray(records[1:], dtype='float32')
    embeddings_dictionary[word] = vector_dimensions
glove_file.close()

embedding_matrix = zeros((vocab_size, 300))
for word, index in tokenizer.word_index.items():
    embedding_vector = embeddings_dictionary.get(word)
    if embedding_vector is not None:
        embedding_matrix[index] = embedding_vector

"""**Model 1 : LSTM, Pre-trained glove embedding of Output_dim=300**"""

deep_inputs = Input(shape=(57,))
embedding_layer = Embedding(vocab_size, 300, weights=[embedding_matrix], trainable=False)(deep_inputs)
LSTM_Layer_1 = LSTM(128)(embedding_layer)
dense_layer_1 = Dense(7, activation='sigmoid')(LSTM_Layer_1)
model = Model(inputs=deep_inputs, outputs=dense_layer_1)
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])
print(model.summary())

history = model.fit(X_train, y_train, batch_size=128, epochs=5, verbose=1, validation_split=0.2)

score = model.evaluate(X_test, y_test, verbose=1)

print("Test Score:", score[0])
print("Test Accuracy:", score[1])

"""**Model 2 : Double LSTM layer, same embedding as above**"""

model = Sequential()
embedding_layer = Embedding(vocab_size, 300, weights=[embedding_matrix], trainable=False)
model.add(LSTM(128, return_sequences=True))  
model.add(Dropout(0.5))
model.add(LSTM(64))
model.add(Dropout(0.5))
model.add(Dense(7, activation='sigmoid'))
model.compile(optimizer='adam', loss='binary_crossentropy')
history = model.fit(X_train, y_train,
                    class_weight='balanced',
                    epochs=5,
                    batch_size=32,
                    validation_split=0.1,
                    callbacks=[])

# from keras.utils import plot_model
# plot_model(model, to_file='model_plot4a.png', show_shapes=True, show_layer_names=True)
# import matplotlib.pyplot as plt

# plt.plot(history.history['acc'])
# plt.plot(history.history['val_acc'])

# plt.title('model accuracy')
# plt.ylabel('accuracy')
# plt.xlabel('epoch')
# plt.legend(['train','test'], loc='upper left')
# plt.show()

# plt.plot(history.history['loss'])
# plt.plot(history.history['val_loss'])

# plt.title('model loss')
# plt.ylabel('loss')
# plt.xlabel('epoch')
# plt.legend(['train','test'], loc='upper left')
# plt.show()